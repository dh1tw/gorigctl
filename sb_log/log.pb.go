// Code generated by protoc-gen-gogo.
// source: log.proto
// DO NOT EDIT!

/*
	Package shackbus_log is a generated protocol buffer package.

	It is generated from these files:
		log.proto

	It has these top-level messages:
		LogMsg
*/
package shackbus_log

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LOG_LEVEL int32

const (
	LOG_LEVEL_ERROR   LOG_LEVEL = 0
	LOG_LEVEL_WARNING LOG_LEVEL = 1
	LOG_LEVEL_INFO    LOG_LEVEL = 2
	LOG_LEVEL_DEBUG   LOG_LEVEL = 3
	LOG_LEVEL_TRACE   LOG_LEVEL = 4
)

var LOG_LEVEL_name = map[int32]string{
	0: "ERROR",
	1: "WARNING",
	2: "INFO",
	3: "DEBUG",
	4: "TRACE",
}
var LOG_LEVEL_value = map[string]int32{
	"ERROR":   0,
	"WARNING": 1,
	"INFO":    2,
	"DEBUG":   3,
	"TRACE":   4,
}

func (x LOG_LEVEL) String() string {
	return proto.EnumName(LOG_LEVEL_name, int32(x))
}
func (LOG_LEVEL) EnumDescriptor() ([]byte, []int) { return fileDescriptorLog, []int{0} }

// standard Shackbus Log Message
type LogMsg struct {
	Level       LOG_LEVEL `protobuf:"varint,1,opt,name=level,proto3,enum=shackbus.log.LOG_LEVEL" json:"level,omitempty"`
	Msg         string    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Description string    `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *LogMsg) Reset()                    { *m = LogMsg{} }
func (m *LogMsg) String() string            { return proto.CompactTextString(m) }
func (*LogMsg) ProtoMessage()               {}
func (*LogMsg) Descriptor() ([]byte, []int) { return fileDescriptorLog, []int{0} }

func (m *LogMsg) GetLevel() LOG_LEVEL {
	if m != nil {
		return m.Level
	}
	return LOG_LEVEL_ERROR
}

func (m *LogMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *LogMsg) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*LogMsg)(nil), "shackbus.log.LogMsg")
	proto.RegisterEnum("shackbus.log.LOG_LEVEL", LOG_LEVEL_name, LOG_LEVEL_value)
}
func (m *LogMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLog(dAtA, i, uint64(m.Level))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLog(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLog(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func encodeFixed64Log(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Log(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLog(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LogMsg) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovLog(uint64(m.Level))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovLog(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovLog(uint64(l))
	}
	return n
}

func sovLog(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLog(x uint64) (n int) {
	return sovLog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (LOG_LEVEL(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLog
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLog
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLog(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLog = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLog   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("log.proto", fileDescriptorLog) }

var fileDescriptorLog = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0xc9, 0x4f, 0xd7,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x29, 0xce, 0x48, 0x4c, 0xce, 0x4e, 0x2a, 0x2d, 0xd6,
	0xcb, 0xc9, 0x4f, 0x57, 0xca, 0xe6, 0x62, 0xf3, 0xc9, 0x4f, 0xf7, 0x2d, 0x4e, 0x17, 0xd2, 0xe5,
	0x62, 0xcd, 0x49, 0x2d, 0x4b, 0xcd, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x33, 0x12, 0xd7, 0x43,
	0x56, 0xa7, 0xe7, 0xe3, 0xef, 0x1e, 0xef, 0xe3, 0x1a, 0xe6, 0xea, 0x13, 0x04, 0x51, 0x25, 0x24,
	0xc0, 0xc5, 0x9c, 0x5b, 0x9c, 0x2e, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x62, 0x0a, 0x29,
	0x70, 0x71, 0xa7, 0xa4, 0x16, 0x27, 0x17, 0x65, 0x16, 0x94, 0x64, 0xe6, 0xe7, 0x49, 0x30, 0x83,
	0x65, 0x90, 0x85, 0xb4, 0x9c, 0xb9, 0x38, 0xe1, 0xe6, 0x08, 0x71, 0x72, 0xb1, 0xba, 0x06, 0x05,
	0xf9, 0x07, 0x09, 0x30, 0x08, 0x71, 0x73, 0xb1, 0x87, 0x3b, 0x06, 0xf9, 0x79, 0xfa, 0xb9, 0x0b,
	0x30, 0x0a, 0x71, 0x70, 0xb1, 0x78, 0xfa, 0xb9, 0xf9, 0x0b, 0x30, 0x81, 0x54, 0xb8, 0xb8, 0x3a,
	0x85, 0xba, 0x0b, 0x30, 0x83, 0x98, 0x21, 0x41, 0x8e, 0xce, 0xae, 0x02, 0x2c, 0x4e, 0x02, 0x27,
	0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72, 0x0c,
	0x49, 0x6c, 0x60, 0x8f, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb0, 0xff, 0x76, 0xfd, 0xe5,
	0x00, 0x00, 0x00,
}
