// Code generated by protoc-gen-gogo.
// source: radio.proto
// DO NOT EDIT!

/*
	Package shackbus_radio is a generated protocol buffer package.

	It is generated from these files:
		radio.proto

	It has these top-level messages:
		State
		SetState
		Capabilities
		Int32List
		Vfo
		MetaData
		Channel
		Value
		Function
		Level
		Parameter
		Split
*/
package shackbus_radio

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type State struct {
	CurrentVfo      string   `protobuf:"bytes,1,opt,name=current_vfo,json=currentVfo,proto3" json:"current_vfo,omitempty"`
	Vfo             *Vfo     `protobuf:"bytes,2,opt,name=vfo" json:"vfo,omitempty"`
	Channel         *Channel `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
	RadioOn         bool     `protobuf:"varint,4,opt,name=radio_on,json=radioOn,proto3" json:"radio_on,omitempty"`
	Ptt             bool     `protobuf:"varint,5,opt,name=ptt,proto3" json:"ptt,omitempty"`
	PollingInterval int32    `protobuf:"varint,6,opt,name=polling_interval,json=pollingInterval,proto3" json:"polling_interval,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{0} }

func (m *State) GetCurrentVfo() string {
	if m != nil {
		return m.CurrentVfo
	}
	return ""
}

func (m *State) GetVfo() *Vfo {
	if m != nil {
		return m.Vfo
	}
	return nil
}

func (m *State) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *State) GetRadioOn() bool {
	if m != nil {
		return m.RadioOn
	}
	return false
}

func (m *State) GetPtt() bool {
	if m != nil {
		return m.Ptt
	}
	return false
}

func (m *State) GetPollingInterval() int32 {
	if m != nil {
		return m.PollingInterval
	}
	return 0
}

type SetState struct {
	CurrentVfo      string    `protobuf:"bytes,1,opt,name=current_vfo,json=currentVfo,proto3" json:"current_vfo,omitempty"`
	Vfo             *Vfo      `protobuf:"bytes,2,opt,name=vfo" json:"vfo,omitempty"`
	Channel         *Channel  `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
	VfoOperations   []string  `protobuf:"bytes,4,rep,name=vfo_operations,json=vfoOperations" json:"vfo_operations,omitempty"`
	RadioOn         bool      `protobuf:"varint,5,opt,name=radio_on,json=radioOn,proto3" json:"radio_on,omitempty"`
	Ptt             bool      `protobuf:"varint,6,opt,name=ptt,proto3" json:"ptt,omitempty"`
	Md              *MetaData `protobuf:"bytes,7,opt,name=md" json:"md,omitempty"`
	PollingInterval int32     `protobuf:"varint,8,opt,name=polling_interval,json=pollingInterval,proto3" json:"polling_interval,omitempty"`
	UserId          string    `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *SetState) Reset()                    { *m = SetState{} }
func (m *SetState) String() string            { return proto.CompactTextString(m) }
func (*SetState) ProtoMessage()               {}
func (*SetState) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{1} }

func (m *SetState) GetCurrentVfo() string {
	if m != nil {
		return m.CurrentVfo
	}
	return ""
}

func (m *SetState) GetVfo() *Vfo {
	if m != nil {
		return m.Vfo
	}
	return nil
}

func (m *SetState) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *SetState) GetVfoOperations() []string {
	if m != nil {
		return m.VfoOperations
	}
	return nil
}

func (m *SetState) GetRadioOn() bool {
	if m != nil {
		return m.RadioOn
	}
	return false
}

func (m *SetState) GetPtt() bool {
	if m != nil {
		return m.Ptt
	}
	return false
}

func (m *SetState) GetMd() *MetaData {
	if m != nil {
		return m.Md
	}
	return nil
}

func (m *SetState) GetPollingInterval() int32 {
	if m != nil {
		return m.PollingInterval
	}
	return 0
}

func (m *SetState) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type Capabilities struct {
	Vfos          []string              `protobuf:"bytes,1,rep,name=vfos" json:"vfos,omitempty"`
	Modes         []string              `protobuf:"bytes,2,rep,name=modes" json:"modes,omitempty"`
	VfoOps        []string              `protobuf:"bytes,3,rep,name=vfo_ops,json=vfoOps" json:"vfo_ops,omitempty"`
	GetFunctions  []string              `protobuf:"bytes,4,rep,name=get_functions,json=getFunctions" json:"get_functions,omitempty"`
	SetFunctions  []string              `protobuf:"bytes,5,rep,name=set_functions,json=setFunctions" json:"set_functions,omitempty"`
	GetLevels     []*Value              `protobuf:"bytes,6,rep,name=get_levels,json=getLevels" json:"get_levels,omitempty"`
	SetLevels     []*Value              `protobuf:"bytes,7,rep,name=set_levels,json=setLevels" json:"set_levels,omitempty"`
	GetParameters []*Value              `protobuf:"bytes,8,rep,name=get_parameters,json=getParameters" json:"get_parameters,omitempty"`
	SetParameters []*Value              `protobuf:"bytes,9,rep,name=set_parameters,json=setParameters" json:"set_parameters,omitempty"`
	MaxRit        int32                 `protobuf:"varint,10,opt,name=max_rit,json=maxRit,proto3" json:"max_rit,omitempty"`
	MaxXit        int32                 `protobuf:"varint,11,opt,name=max_xit,json=maxXit,proto3" json:"max_xit,omitempty"`
	MaxIfShift    int32                 `protobuf:"varint,12,opt,name=max_if_shift,json=maxIfShift,proto3" json:"max_if_shift,omitempty"`
	Filters       map[string]*Int32List `protobuf:"bytes,13,rep,name=filters" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	TuningSteps   map[string]*Int32List `protobuf:"bytes,14,rep,name=tuning_steps,json=tuningSteps" json:"tuning_steps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Preamps       []int32               `protobuf:"varint,15,rep,packed,name=preamps" json:"preamps,omitempty"`
	Attenuators   []int32               `protobuf:"varint,16,rep,packed,name=attenuators" json:"attenuators,omitempty"`
	RigModel      int32                 `protobuf:"varint,17,opt,name=rig_model,json=rigModel,proto3" json:"rig_model,omitempty"`
	ModelName     string                `protobuf:"bytes,18,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	Version       string                `protobuf:"bytes,19,opt,name=version,proto3" json:"version,omitempty"`
	MfgName       string                `protobuf:"bytes,20,opt,name=mfg_name,json=mfgName,proto3" json:"mfg_name,omitempty"`
	Status        string                `protobuf:"bytes,21,opt,name=status,proto3" json:"status,omitempty"`
	HasPowerstat  bool                  `protobuf:"varint,22,opt,name=has_powerstat,json=hasPowerstat,proto3" json:"has_powerstat,omitempty"`
	HasAnt        bool                  `protobuf:"varint,23,opt,name=has_ant,json=hasAnt,proto3" json:"has_ant,omitempty"`
	HasRit        bool                  `protobuf:"varint,24,opt,name=has_rit,json=hasRit,proto3" json:"has_rit,omitempty"`
	HasXit        bool                  `protobuf:"varint,25,opt,name=has_xit,json=hasXit,proto3" json:"has_xit,omitempty"`
	HasSplit      bool                  `protobuf:"varint,26,opt,name=has_split,json=hasSplit,proto3" json:"has_split,omitempty"`
	HasTs         bool                  `protobuf:"varint,27,opt,name=has_ts,json=hasTs,proto3" json:"has_ts,omitempty"`
	HasPtt        bool                  `protobuf:"varint,28,opt,name=has_ptt,json=hasPtt,proto3" json:"has_ptt,omitempty"`
}

func (m *Capabilities) Reset()                    { *m = Capabilities{} }
func (m *Capabilities) String() string            { return proto.CompactTextString(m) }
func (*Capabilities) ProtoMessage()               {}
func (*Capabilities) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{2} }

func (m *Capabilities) GetVfos() []string {
	if m != nil {
		return m.Vfos
	}
	return nil
}

func (m *Capabilities) GetModes() []string {
	if m != nil {
		return m.Modes
	}
	return nil
}

func (m *Capabilities) GetVfoOps() []string {
	if m != nil {
		return m.VfoOps
	}
	return nil
}

func (m *Capabilities) GetGetFunctions() []string {
	if m != nil {
		return m.GetFunctions
	}
	return nil
}

func (m *Capabilities) GetSetFunctions() []string {
	if m != nil {
		return m.SetFunctions
	}
	return nil
}

func (m *Capabilities) GetGetLevels() []*Value {
	if m != nil {
		return m.GetLevels
	}
	return nil
}

func (m *Capabilities) GetSetLevels() []*Value {
	if m != nil {
		return m.SetLevels
	}
	return nil
}

func (m *Capabilities) GetGetParameters() []*Value {
	if m != nil {
		return m.GetParameters
	}
	return nil
}

func (m *Capabilities) GetSetParameters() []*Value {
	if m != nil {
		return m.SetParameters
	}
	return nil
}

func (m *Capabilities) GetMaxRit() int32 {
	if m != nil {
		return m.MaxRit
	}
	return 0
}

func (m *Capabilities) GetMaxXit() int32 {
	if m != nil {
		return m.MaxXit
	}
	return 0
}

func (m *Capabilities) GetMaxIfShift() int32 {
	if m != nil {
		return m.MaxIfShift
	}
	return 0
}

func (m *Capabilities) GetFilters() map[string]*Int32List {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *Capabilities) GetTuningSteps() map[string]*Int32List {
	if m != nil {
		return m.TuningSteps
	}
	return nil
}

func (m *Capabilities) GetPreamps() []int32 {
	if m != nil {
		return m.Preamps
	}
	return nil
}

func (m *Capabilities) GetAttenuators() []int32 {
	if m != nil {
		return m.Attenuators
	}
	return nil
}

func (m *Capabilities) GetRigModel() int32 {
	if m != nil {
		return m.RigModel
	}
	return 0
}

func (m *Capabilities) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *Capabilities) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Capabilities) GetMfgName() string {
	if m != nil {
		return m.MfgName
	}
	return ""
}

func (m *Capabilities) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Capabilities) GetHasPowerstat() bool {
	if m != nil {
		return m.HasPowerstat
	}
	return false
}

func (m *Capabilities) GetHasAnt() bool {
	if m != nil {
		return m.HasAnt
	}
	return false
}

func (m *Capabilities) GetHasRit() bool {
	if m != nil {
		return m.HasRit
	}
	return false
}

func (m *Capabilities) GetHasXit() bool {
	if m != nil {
		return m.HasXit
	}
	return false
}

func (m *Capabilities) GetHasSplit() bool {
	if m != nil {
		return m.HasSplit
	}
	return false
}

func (m *Capabilities) GetHasTs() bool {
	if m != nil {
		return m.HasTs
	}
	return false
}

func (m *Capabilities) GetHasPtt() bool {
	if m != nil {
		return m.HasPtt
	}
	return false
}

type Int32List struct {
	Value []int32 `protobuf:"varint,14,rep,packed,name=value" json:"value,omitempty"`
}

func (m *Int32List) Reset()                    { *m = Int32List{} }
func (m *Int32List) String() string            { return proto.CompactTextString(m) }
func (*Int32List) ProtoMessage()               {}
func (*Int32List) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{3} }

func (m *Int32List) GetValue() []int32 {
	if m != nil {
		return m.Value
	}
	return nil
}

type Vfo struct {
	Frequency  float64            `protobuf:"fixed64,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Mode       string             `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
	PbWidth    int32              `protobuf:"varint,4,opt,name=pb_width,json=pbWidth,proto3" json:"pb_width,omitempty"`
	Ant        int32              `protobuf:"varint,5,opt,name=ant,proto3" json:"ant,omitempty"`
	Rit        int32              `protobuf:"varint,9,opt,name=rit,proto3" json:"rit,omitempty"`
	Xit        int32              `protobuf:"varint,10,opt,name=xit,proto3" json:"xit,omitempty"`
	Split      *Split             `protobuf:"bytes,11,opt,name=split" json:"split,omitempty"`
	TuningStep int32              `protobuf:"varint,12,opt,name=tuning_step,json=tuningStep,proto3" json:"tuning_step,omitempty"`
	Functions  []string           `protobuf:"bytes,13,rep,name=functions" json:"functions,omitempty"`
	Levels     map[string]float32 `protobuf:"bytes,14,rep,name=levels" json:"levels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Parameters map[string]float32 `protobuf:"bytes,15,rep,name=parameters" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (m *Vfo) Reset()                    { *m = Vfo{} }
func (m *Vfo) String() string            { return proto.CompactTextString(m) }
func (*Vfo) ProtoMessage()               {}
func (*Vfo) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{4} }

func (m *Vfo) GetFrequency() float64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *Vfo) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *Vfo) GetPbWidth() int32 {
	if m != nil {
		return m.PbWidth
	}
	return 0
}

func (m *Vfo) GetAnt() int32 {
	if m != nil {
		return m.Ant
	}
	return 0
}

func (m *Vfo) GetRit() int32 {
	if m != nil {
		return m.Rit
	}
	return 0
}

func (m *Vfo) GetXit() int32 {
	if m != nil {
		return m.Xit
	}
	return 0
}

func (m *Vfo) GetSplit() *Split {
	if m != nil {
		return m.Split
	}
	return nil
}

func (m *Vfo) GetTuningStep() int32 {
	if m != nil {
		return m.TuningStep
	}
	return 0
}

func (m *Vfo) GetFunctions() []string {
	if m != nil {
		return m.Functions
	}
	return nil
}

func (m *Vfo) GetLevels() map[string]float32 {
	if m != nil {
		return m.Levels
	}
	return nil
}

func (m *Vfo) GetParameters() map[string]float32 {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type MetaData struct {
	HasFrequency       bool `protobuf:"varint,1,opt,name=has_frequency,json=hasFrequency,proto3" json:"has_frequency,omitempty"`
	HasMode            bool `protobuf:"varint,2,opt,name=has_mode,json=hasMode,proto3" json:"has_mode,omitempty"`
	HasPbWidth         bool `protobuf:"varint,3,opt,name=has_pb_width,json=hasPbWidth,proto3" json:"has_pb_width,omitempty"`
	HasAnt             bool `protobuf:"varint,4,opt,name=has_ant,json=hasAnt,proto3" json:"has_ant,omitempty"`
	HasRit             bool `protobuf:"varint,5,opt,name=has_rit,json=hasRit,proto3" json:"has_rit,omitempty"`
	HasXit             bool `protobuf:"varint,6,opt,name=has_xit,json=hasXit,proto3" json:"has_xit,omitempty"`
	HasSplit           bool `protobuf:"varint,7,opt,name=has_split,json=hasSplit,proto3" json:"has_split,omitempty"`
	HasTuningStep      bool `protobuf:"varint,8,opt,name=has_tuning_step,json=hasTuningStep,proto3" json:"has_tuning_step,omitempty"`
	HasFunctions       bool `protobuf:"varint,9,opt,name=has_functions,json=hasFunctions,proto3" json:"has_functions,omitempty"`
	HasLevels          bool `protobuf:"varint,10,opt,name=has_levels,json=hasLevels,proto3" json:"has_levels,omitempty"`
	HasParameters      bool `protobuf:"varint,11,opt,name=has_parameters,json=hasParameters,proto3" json:"has_parameters,omitempty"`
	HasPtt             bool `protobuf:"varint,12,opt,name=has_ptt,json=hasPtt,proto3" json:"has_ptt,omitempty"`
	HasRadioOn         bool `protobuf:"varint,13,opt,name=has_radio_on,json=hasRadioOn,proto3" json:"has_radio_on,omitempty"`
	HasPollingInterval bool `protobuf:"varint,14,opt,name=has_polling_interval,json=hasPollingInterval,proto3" json:"has_polling_interval,omitempty"`
}

func (m *MetaData) Reset()                    { *m = MetaData{} }
func (m *MetaData) String() string            { return proto.CompactTextString(m) }
func (*MetaData) ProtoMessage()               {}
func (*MetaData) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{5} }

func (m *MetaData) GetHasFrequency() bool {
	if m != nil {
		return m.HasFrequency
	}
	return false
}

func (m *MetaData) GetHasMode() bool {
	if m != nil {
		return m.HasMode
	}
	return false
}

func (m *MetaData) GetHasPbWidth() bool {
	if m != nil {
		return m.HasPbWidth
	}
	return false
}

func (m *MetaData) GetHasAnt() bool {
	if m != nil {
		return m.HasAnt
	}
	return false
}

func (m *MetaData) GetHasRit() bool {
	if m != nil {
		return m.HasRit
	}
	return false
}

func (m *MetaData) GetHasXit() bool {
	if m != nil {
		return m.HasXit
	}
	return false
}

func (m *MetaData) GetHasSplit() bool {
	if m != nil {
		return m.HasSplit
	}
	return false
}

func (m *MetaData) GetHasTuningStep() bool {
	if m != nil {
		return m.HasTuningStep
	}
	return false
}

func (m *MetaData) GetHasFunctions() bool {
	if m != nil {
		return m.HasFunctions
	}
	return false
}

func (m *MetaData) GetHasLevels() bool {
	if m != nil {
		return m.HasLevels
	}
	return false
}

func (m *MetaData) GetHasParameters() bool {
	if m != nil {
		return m.HasParameters
	}
	return false
}

func (m *MetaData) GetHasPtt() bool {
	if m != nil {
		return m.HasPtt
	}
	return false
}

func (m *MetaData) GetHasRadioOn() bool {
	if m != nil {
		return m.HasRadioOn
	}
	return false
}

func (m *MetaData) GetHasPollingInterval() bool {
	if m != nil {
		return m.HasPollingInterval
	}
	return false
}

type Channel struct {
	Channel int32 `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *Channel) Reset()                    { *m = Channel{} }
func (m *Channel) String() string            { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()               {}
func (*Channel) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{6} }

func (m *Channel) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

type Value struct {
	Name string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Step float32 `protobuf:"fixed32,2,opt,name=step,proto3" json:"step,omitempty"`
	Min  float32 `protobuf:"fixed32,3,opt,name=min,proto3" json:"min,omitempty"`
	Max  float32 `protobuf:"fixed32,4,opt,name=max,proto3" json:"max,omitempty"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{7} }

func (m *Value) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Value) GetStep() float32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *Value) GetMin() float32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Value) GetMax() float32 {
	if m != nil {
		return m.Max
	}
	return 0
}

type Function struct {
	Func  string `protobuf:"bytes,1,opt,name=func,proto3" json:"func,omitempty"`
	Value bool   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Function) Reset()                    { *m = Function{} }
func (m *Function) String() string            { return proto.CompactTextString(m) }
func (*Function) ProtoMessage()               {}
func (*Function) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{8} }

func (m *Function) GetFunc() string {
	if m != nil {
		return m.Func
	}
	return ""
}

func (m *Function) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type Level struct {
	Func  string `protobuf:"bytes,1,opt,name=func,proto3" json:"func,omitempty"`
	Value bool   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Level) Reset()                    { *m = Level{} }
func (m *Level) String() string            { return proto.CompactTextString(m) }
func (*Level) ProtoMessage()               {}
func (*Level) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{9} }

func (m *Level) GetFunc() string {
	if m != nil {
		return m.Func
	}
	return ""
}

func (m *Level) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type Parameter struct {
	Param string `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
	Value bool   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Parameter) Reset()                    { *m = Parameter{} }
func (m *Parameter) String() string            { return proto.CompactTextString(m) }
func (*Parameter) ProtoMessage()               {}
func (*Parameter) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{10} }

func (m *Parameter) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func (m *Parameter) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type Split struct {
	Enabled   bool    `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Vfo       string  `protobuf:"bytes,2,opt,name=vfo,proto3" json:"vfo,omitempty"`
	Frequency float64 `protobuf:"fixed64,3,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Mode      string  `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	PbWidth   int32   `protobuf:"varint,5,opt,name=pbWidth,proto3" json:"pbWidth,omitempty"`
}

func (m *Split) Reset()                    { *m = Split{} }
func (m *Split) String() string            { return proto.CompactTextString(m) }
func (*Split) ProtoMessage()               {}
func (*Split) Descriptor() ([]byte, []int) { return fileDescriptorRadio, []int{11} }

func (m *Split) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Split) GetVfo() string {
	if m != nil {
		return m.Vfo
	}
	return ""
}

func (m *Split) GetFrequency() float64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *Split) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *Split) GetPbWidth() int32 {
	if m != nil {
		return m.PbWidth
	}
	return 0
}

func init() {
	proto.RegisterType((*State)(nil), "shackbus.radio.State")
	proto.RegisterType((*SetState)(nil), "shackbus.radio.SetState")
	proto.RegisterType((*Capabilities)(nil), "shackbus.radio.Capabilities")
	proto.RegisterType((*Int32List)(nil), "shackbus.radio.Int32List")
	proto.RegisterType((*Vfo)(nil), "shackbus.radio.Vfo")
	proto.RegisterType((*MetaData)(nil), "shackbus.radio.MetaData")
	proto.RegisterType((*Channel)(nil), "shackbus.radio.Channel")
	proto.RegisterType((*Value)(nil), "shackbus.radio.Value")
	proto.RegisterType((*Function)(nil), "shackbus.radio.Function")
	proto.RegisterType((*Level)(nil), "shackbus.radio.Level")
	proto.RegisterType((*Parameter)(nil), "shackbus.radio.Parameter")
	proto.RegisterType((*Split)(nil), "shackbus.radio.Split")
}
func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CurrentVfo) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.CurrentVfo)))
		i += copy(dAtA[i:], m.CurrentVfo)
	}
	if m.Vfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.Vfo.Size()))
		n1, err := m.Vfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Channel != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.Channel.Size()))
		n2, err := m.Channel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.RadioOn {
		dAtA[i] = 0x20
		i++
		if m.RadioOn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ptt {
		dAtA[i] = 0x28
		i++
		if m.Ptt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PollingInterval != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.PollingInterval))
	}
	return i, nil
}

func (m *SetState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CurrentVfo) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.CurrentVfo)))
		i += copy(dAtA[i:], m.CurrentVfo)
	}
	if m.Vfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.Vfo.Size()))
		n3, err := m.Vfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Channel != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.Channel.Size()))
		n4, err := m.Channel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.VfoOperations) > 0 {
		for _, s := range m.VfoOperations {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.RadioOn {
		dAtA[i] = 0x28
		i++
		if m.RadioOn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ptt {
		dAtA[i] = 0x30
		i++
		if m.Ptt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Md != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.Md.Size()))
		n5, err := m.Md.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.PollingInterval != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.PollingInterval))
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	return i, nil
}

func (m *Capabilities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Capabilities) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Vfos) > 0 {
		for _, s := range m.Vfos {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Modes) > 0 {
		for _, s := range m.Modes {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.VfoOps) > 0 {
		for _, s := range m.VfoOps {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.GetFunctions) > 0 {
		for _, s := range m.GetFunctions {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.SetFunctions) > 0 {
		for _, s := range m.SetFunctions {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.GetLevels) > 0 {
		for _, msg := range m.GetLevels {
			dAtA[i] = 0x32
			i++
			i = encodeVarintRadio(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SetLevels) > 0 {
		for _, msg := range m.SetLevels {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintRadio(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GetParameters) > 0 {
		for _, msg := range m.GetParameters {
			dAtA[i] = 0x42
			i++
			i = encodeVarintRadio(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SetParameters) > 0 {
		for _, msg := range m.SetParameters {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintRadio(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MaxRit != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.MaxRit))
	}
	if m.MaxXit != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.MaxXit))
	}
	if m.MaxIfShift != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.MaxIfShift))
	}
	if len(m.Filters) > 0 {
		for k, _ := range m.Filters {
			dAtA[i] = 0x6a
			i++
			v := m.Filters[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovRadio(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovRadio(uint64(len(k))) + msgSize
			i = encodeVarintRadio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRadio(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintRadio(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	if len(m.TuningSteps) > 0 {
		for k, _ := range m.TuningSteps {
			dAtA[i] = 0x72
			i++
			v := m.TuningSteps[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovRadio(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovRadio(uint64(len(k))) + msgSize
			i = encodeVarintRadio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRadio(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintRadio(dAtA, i, uint64(v.Size()))
				n7, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n7
			}
		}
	}
	if len(m.Preamps) > 0 {
		dAtA9 := make([]byte, len(m.Preamps)*10)
		var j8 int
		for _, num1 := range m.Preamps {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0x7a
		i++
		i = encodeVarintRadio(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	if len(m.Attenuators) > 0 {
		dAtA11 := make([]byte, len(m.Attenuators)*10)
		var j10 int
		for _, num1 := range m.Attenuators {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRadio(dAtA, i, uint64(j10))
		i += copy(dAtA[i:], dAtA11[:j10])
	}
	if m.RigModel != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.RigModel))
	}
	if len(m.ModelName) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.ModelName)))
		i += copy(dAtA[i:], m.ModelName)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.MfgName) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.MfgName)))
		i += copy(dAtA[i:], m.MfgName)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if m.HasPowerstat {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		if m.HasPowerstat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasAnt {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		if m.HasAnt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasRit {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		if m.HasRit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasXit {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		if m.HasXit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasSplit {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		if m.HasSplit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasTs {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		if m.HasTs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasPtt {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		if m.HasPtt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Int32List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Int32List) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA13 := make([]byte, len(m.Value)*10)
		var j12 int
		for _, num1 := range m.Value {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		dAtA[i] = 0x72
		i++
		i = encodeVarintRadio(dAtA, i, uint64(j12))
		i += copy(dAtA[i:], dAtA13[:j12])
	}
	return i, nil
}

func (m *Vfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Frequency != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Radio(dAtA, i, uint64(math.Float64bits(float64(m.Frequency))))
	}
	if len(m.Mode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.Mode)))
		i += copy(dAtA[i:], m.Mode)
	}
	if m.PbWidth != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.PbWidth))
	}
	if m.Ant != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.Ant))
	}
	if m.Rit != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.Rit))
	}
	if m.Xit != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.Xit))
	}
	if m.Split != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.Split.Size()))
		n14, err := m.Split.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.TuningStep != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.TuningStep))
	}
	if len(m.Functions) > 0 {
		for _, s := range m.Functions {
			dAtA[i] = 0x6a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Levels) > 0 {
		for k, _ := range m.Levels {
			dAtA[i] = 0x72
			i++
			v := m.Levels[k]
			mapSize := 1 + len(k) + sovRadio(uint64(len(k))) + 1 + 4
			i = encodeVarintRadio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRadio(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x15
			i++
			i = encodeFixed32Radio(dAtA, i, uint32(math.Float32bits(float32(v))))
		}
	}
	if len(m.Parameters) > 0 {
		for k, _ := range m.Parameters {
			dAtA[i] = 0x7a
			i++
			v := m.Parameters[k]
			mapSize := 1 + len(k) + sovRadio(uint64(len(k))) + 1 + 4
			i = encodeVarintRadio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRadio(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x15
			i++
			i = encodeFixed32Radio(dAtA, i, uint32(math.Float32bits(float32(v))))
		}
	}
	return i, nil
}

func (m *MetaData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HasFrequency {
		dAtA[i] = 0x8
		i++
		if m.HasFrequency {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasMode {
		dAtA[i] = 0x10
		i++
		if m.HasMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasPbWidth {
		dAtA[i] = 0x18
		i++
		if m.HasPbWidth {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasAnt {
		dAtA[i] = 0x20
		i++
		if m.HasAnt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasRit {
		dAtA[i] = 0x28
		i++
		if m.HasRit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasXit {
		dAtA[i] = 0x30
		i++
		if m.HasXit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasSplit {
		dAtA[i] = 0x38
		i++
		if m.HasSplit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasTuningStep {
		dAtA[i] = 0x40
		i++
		if m.HasTuningStep {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasFunctions {
		dAtA[i] = 0x48
		i++
		if m.HasFunctions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasLevels {
		dAtA[i] = 0x50
		i++
		if m.HasLevels {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasParameters {
		dAtA[i] = 0x58
		i++
		if m.HasParameters {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasPtt {
		dAtA[i] = 0x60
		i++
		if m.HasPtt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasRadioOn {
		dAtA[i] = 0x68
		i++
		if m.HasRadioOn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasPollingInterval {
		dAtA[i] = 0x70
		i++
		if m.HasPollingInterval {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Channel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Channel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.Channel))
	}
	return i, nil
}

func (m *Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Value) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Step != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Radio(dAtA, i, uint32(math.Float32bits(float32(m.Step))))
	}
	if m.Min != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Radio(dAtA, i, uint32(math.Float32bits(float32(m.Min))))
	}
	if m.Max != 0 {
		dAtA[i] = 0x25
		i++
		i = encodeFixed32Radio(dAtA, i, uint32(math.Float32bits(float32(m.Max))))
	}
	return i, nil
}

func (m *Function) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Function) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Func) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.Func)))
		i += copy(dAtA[i:], m.Func)
	}
	if m.Value {
		dAtA[i] = 0x10
		i++
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Level) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Level) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Func) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.Func)))
		i += copy(dAtA[i:], m.Func)
	}
	if m.Value {
		dAtA[i] = 0x10
		i++
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Parameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Parameter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Param) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.Param)))
		i += copy(dAtA[i:], m.Param)
	}
	if m.Value {
		dAtA[i] = 0x10
		i++
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Split) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Split) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enabled {
		dAtA[i] = 0x8
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Vfo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.Vfo)))
		i += copy(dAtA[i:], m.Vfo)
	}
	if m.Frequency != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64Radio(dAtA, i, uint64(math.Float64bits(float64(m.Frequency))))
	}
	if len(m.Mode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRadio(dAtA, i, uint64(len(m.Mode)))
		i += copy(dAtA[i:], m.Mode)
	}
	if m.PbWidth != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRadio(dAtA, i, uint64(m.PbWidth))
	}
	return i, nil
}

func encodeFixed64Radio(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Radio(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRadio(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *State) Size() (n int) {
	var l int
	_ = l
	l = len(m.CurrentVfo)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.Vfo != nil {
		l = m.Vfo.Size()
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.RadioOn {
		n += 2
	}
	if m.Ptt {
		n += 2
	}
	if m.PollingInterval != 0 {
		n += 1 + sovRadio(uint64(m.PollingInterval))
	}
	return n
}

func (m *SetState) Size() (n int) {
	var l int
	_ = l
	l = len(m.CurrentVfo)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.Vfo != nil {
		l = m.Vfo.Size()
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovRadio(uint64(l))
	}
	if len(m.VfoOperations) > 0 {
		for _, s := range m.VfoOperations {
			l = len(s)
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if m.RadioOn {
		n += 2
	}
	if m.Ptt {
		n += 2
	}
	if m.Md != nil {
		l = m.Md.Size()
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.PollingInterval != 0 {
		n += 1 + sovRadio(uint64(m.PollingInterval))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	return n
}

func (m *Capabilities) Size() (n int) {
	var l int
	_ = l
	if len(m.Vfos) > 0 {
		for _, s := range m.Vfos {
			l = len(s)
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if len(m.Modes) > 0 {
		for _, s := range m.Modes {
			l = len(s)
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if len(m.VfoOps) > 0 {
		for _, s := range m.VfoOps {
			l = len(s)
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if len(m.GetFunctions) > 0 {
		for _, s := range m.GetFunctions {
			l = len(s)
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if len(m.SetFunctions) > 0 {
		for _, s := range m.SetFunctions {
			l = len(s)
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if len(m.GetLevels) > 0 {
		for _, e := range m.GetLevels {
			l = e.Size()
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if len(m.SetLevels) > 0 {
		for _, e := range m.SetLevels {
			l = e.Size()
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if len(m.GetParameters) > 0 {
		for _, e := range m.GetParameters {
			l = e.Size()
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if len(m.SetParameters) > 0 {
		for _, e := range m.SetParameters {
			l = e.Size()
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if m.MaxRit != 0 {
		n += 1 + sovRadio(uint64(m.MaxRit))
	}
	if m.MaxXit != 0 {
		n += 1 + sovRadio(uint64(m.MaxXit))
	}
	if m.MaxIfShift != 0 {
		n += 1 + sovRadio(uint64(m.MaxIfShift))
	}
	if len(m.Filters) > 0 {
		for k, v := range m.Filters {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRadio(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRadio(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRadio(uint64(mapEntrySize))
		}
	}
	if len(m.TuningSteps) > 0 {
		for k, v := range m.TuningSteps {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRadio(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRadio(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRadio(uint64(mapEntrySize))
		}
	}
	if len(m.Preamps) > 0 {
		l = 0
		for _, e := range m.Preamps {
			l += sovRadio(uint64(e))
		}
		n += 1 + sovRadio(uint64(l)) + l
	}
	if len(m.Attenuators) > 0 {
		l = 0
		for _, e := range m.Attenuators {
			l += sovRadio(uint64(e))
		}
		n += 2 + sovRadio(uint64(l)) + l
	}
	if m.RigModel != 0 {
		n += 2 + sovRadio(uint64(m.RigModel))
	}
	l = len(m.ModelName)
	if l > 0 {
		n += 2 + l + sovRadio(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 2 + l + sovRadio(uint64(l))
	}
	l = len(m.MfgName)
	if l > 0 {
		n += 2 + l + sovRadio(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 2 + l + sovRadio(uint64(l))
	}
	if m.HasPowerstat {
		n += 3
	}
	if m.HasAnt {
		n += 3
	}
	if m.HasRit {
		n += 3
	}
	if m.HasXit {
		n += 3
	}
	if m.HasSplit {
		n += 3
	}
	if m.HasTs {
		n += 3
	}
	if m.HasPtt {
		n += 3
	}
	return n
}

func (m *Int32List) Size() (n int) {
	var l int
	_ = l
	if len(m.Value) > 0 {
		l = 0
		for _, e := range m.Value {
			l += sovRadio(uint64(e))
		}
		n += 1 + sovRadio(uint64(l)) + l
	}
	return n
}

func (m *Vfo) Size() (n int) {
	var l int
	_ = l
	if m.Frequency != 0 {
		n += 9
	}
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.PbWidth != 0 {
		n += 1 + sovRadio(uint64(m.PbWidth))
	}
	if m.Ant != 0 {
		n += 1 + sovRadio(uint64(m.Ant))
	}
	if m.Rit != 0 {
		n += 1 + sovRadio(uint64(m.Rit))
	}
	if m.Xit != 0 {
		n += 1 + sovRadio(uint64(m.Xit))
	}
	if m.Split != nil {
		l = m.Split.Size()
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.TuningStep != 0 {
		n += 1 + sovRadio(uint64(m.TuningStep))
	}
	if len(m.Functions) > 0 {
		for _, s := range m.Functions {
			l = len(s)
			n += 1 + l + sovRadio(uint64(l))
		}
	}
	if len(m.Levels) > 0 {
		for k, v := range m.Levels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRadio(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 1 + sovRadio(uint64(mapEntrySize))
		}
	}
	if len(m.Parameters) > 0 {
		for k, v := range m.Parameters {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRadio(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 1 + sovRadio(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MetaData) Size() (n int) {
	var l int
	_ = l
	if m.HasFrequency {
		n += 2
	}
	if m.HasMode {
		n += 2
	}
	if m.HasPbWidth {
		n += 2
	}
	if m.HasAnt {
		n += 2
	}
	if m.HasRit {
		n += 2
	}
	if m.HasXit {
		n += 2
	}
	if m.HasSplit {
		n += 2
	}
	if m.HasTuningStep {
		n += 2
	}
	if m.HasFunctions {
		n += 2
	}
	if m.HasLevels {
		n += 2
	}
	if m.HasParameters {
		n += 2
	}
	if m.HasPtt {
		n += 2
	}
	if m.HasRadioOn {
		n += 2
	}
	if m.HasPollingInterval {
		n += 2
	}
	return n
}

func (m *Channel) Size() (n int) {
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovRadio(uint64(m.Channel))
	}
	return n
}

func (m *Value) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.Step != 0 {
		n += 5
	}
	if m.Min != 0 {
		n += 5
	}
	if m.Max != 0 {
		n += 5
	}
	return n
}

func (m *Function) Size() (n int) {
	var l int
	_ = l
	l = len(m.Func)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.Value {
		n += 2
	}
	return n
}

func (m *Level) Size() (n int) {
	var l int
	_ = l
	l = len(m.Func)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.Value {
		n += 2
	}
	return n
}

func (m *Parameter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.Value {
		n += 2
	}
	return n
}

func (m *Split) Size() (n int) {
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.Vfo)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.Frequency != 0 {
		n += 9
	}
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovRadio(uint64(l))
	}
	if m.PbWidth != 0 {
		n += 1 + sovRadio(uint64(m.PbWidth))
	}
	return n
}

func sovRadio(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRadio(x uint64) (n int) {
	return sovRadio(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentVfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentVfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vfo == nil {
				m.Vfo = &Vfo{}
			}
			if err := m.Vfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &Channel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RadioOn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RadioOn = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ptt = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollingInterval", wireType)
			}
			m.PollingInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollingInterval |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentVfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentVfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vfo == nil {
				m.Vfo = &Vfo{}
			}
			if err := m.Vfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &Channel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VfoOperations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VfoOperations = append(m.VfoOperations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RadioOn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RadioOn = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ptt = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Md == nil {
				m.Md = &MetaData{}
			}
			if err := m.Md.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollingInterval", wireType)
			}
			m.PollingInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollingInterval |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Capabilities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Capabilities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Capabilities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vfos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vfos = append(m.Vfos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modes = append(m.Modes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VfoOps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VfoOps = append(m.VfoOps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetFunctions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GetFunctions = append(m.GetFunctions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetFunctions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SetFunctions = append(m.SetFunctions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetLevels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GetLevels = append(m.GetLevels, &Value{})
			if err := m.GetLevels[len(m.GetLevels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetLevels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SetLevels = append(m.SetLevels, &Value{})
			if err := m.SetLevels[len(m.SetLevels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GetParameters = append(m.GetParameters, &Value{})
			if err := m.GetParameters[len(m.GetParameters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SetParameters = append(m.SetParameters, &Value{})
			if err := m.SetParameters[len(m.SetParameters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRit", wireType)
			}
			m.MaxRit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxXit", wireType)
			}
			m.MaxXit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxXit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxIfShift", wireType)
			}
			m.MaxIfShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxIfShift |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthRadio
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Filters == nil {
				m.Filters = make(map[string]*Int32List)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthRadio
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthRadio
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &Int32List{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Filters[mapkey] = mapvalue
			} else {
				var mapvalue *Int32List
				m.Filters[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TuningSteps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthRadio
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.TuningSteps == nil {
				m.TuningSteps = make(map[string]*Int32List)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthRadio
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthRadio
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &Int32List{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.TuningSteps[mapkey] = mapvalue
			} else {
				var mapvalue *Int32List
				m.TuningSteps[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 15:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Preamps = append(m.Preamps, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRadio
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRadio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Preamps = append(m.Preamps, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Preamps", wireType)
			}
		case 16:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Attenuators = append(m.Attenuators, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRadio
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRadio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Attenuators = append(m.Attenuators, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Attenuators", wireType)
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RigModel", wireType)
			}
			m.RigModel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RigModel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MfgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MfgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasPowerstat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasPowerstat = bool(v != 0)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasAnt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasAnt = bool(v != 0)
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasRit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasRit = bool(v != 0)
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasXit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasXit = bool(v != 0)
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasSplit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasSplit = bool(v != 0)
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasTs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasTs = bool(v != 0)
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasPtt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasPtt = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Int32List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Int32List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Int32List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 14:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Value = append(m.Value, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRadio
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRadio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Value = append(m.Value, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Frequency = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PbWidth", wireType)
			}
			m.PbWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PbWidth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ant", wireType)
			}
			m.Ant = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ant |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rit", wireType)
			}
			m.Rit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xit", wireType)
			}
			m.Xit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Xit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Split", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Split == nil {
				m.Split = &Split{}
			}
			if err := m.Split.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TuningStep", wireType)
			}
			m.TuningStep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TuningStep |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Functions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Functions = append(m.Functions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Levels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthRadio
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Levels == nil {
				m.Levels = make(map[string]float32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				mapvaluetemp = uint32(dAtA[iNdEx-4])
				mapvaluetemp |= uint32(dAtA[iNdEx-3]) << 8
				mapvaluetemp |= uint32(dAtA[iNdEx-2]) << 16
				mapvaluetemp |= uint32(dAtA[iNdEx-1]) << 24
				mapvalue := math.Float32frombits(mapvaluetemp)
				m.Levels[mapkey] = mapvalue
			} else {
				var mapvalue float32
				m.Levels[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthRadio
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Parameters == nil {
				m.Parameters = make(map[string]float32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				mapvaluetemp = uint32(dAtA[iNdEx-4])
				mapvaluetemp |= uint32(dAtA[iNdEx-3]) << 8
				mapvaluetemp |= uint32(dAtA[iNdEx-2]) << 16
				mapvaluetemp |= uint32(dAtA[iNdEx-1]) << 24
				mapvalue := math.Float32frombits(mapvaluetemp)
				m.Parameters[mapkey] = mapvalue
			} else {
				var mapvalue float32
				m.Parameters[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasFrequency", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasFrequency = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMode = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasPbWidth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasPbWidth = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasAnt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasAnt = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasRit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasRit = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasXit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasXit = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasSplit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasSplit = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasTuningStep", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasTuningStep = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasFunctions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasFunctions = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasLevels", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasLevels = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasParameters", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasParameters = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasPtt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasPtt = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasRadioOn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasRadioOn = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasPollingInterval", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasPollingInterval = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Channel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Step = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Min = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Max = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Function) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Function: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Function: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Func = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Level) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Level: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Level: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Func = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Parameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Parameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Parameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Split) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Split: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Split: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Frequency = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRadio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PbWidth", wireType)
			}
			m.PbWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PbWidth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRadio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRadio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRadio(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRadio
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRadio
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRadio
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRadio
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRadio(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRadio = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRadio   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("radio.proto", fileDescriptorRadio) }

var fileDescriptorRadio = []byte{
	// 1269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x57, 0x4b, 0x6f, 0x1b, 0xd5,
	0x17, 0xff, 0x8f, 0x9d, 0xb1, 0x67, 0x8e, 0x1d, 0x27, 0xff, 0xdb, 0xb4, 0xb9, 0x49, 0xdb, 0xd4,
	0xb8, 0x2a, 0x72, 0x85, 0x08, 0xf4, 0x21, 0x15, 0x10, 0x2c, 0x20, 0x50, 0x29, 0x52, 0x4b, 0xa3,
	0x49, 0x29, 0xb0, 0x1a, 0xdd, 0xc4, 0x77, 0xec, 0x51, 0xe7, 0xc5, 0xdc, 0x6b, 0xd7, 0x5d, 0xf1,
	0x35, 0x58, 0xf3, 0x65, 0x60, 0xc9, 0x82, 0x15, 0x2b, 0x54, 0xb6, 0x7c, 0x08, 0x74, 0xce, 0x9d,
	0x19, 0x8f, 0x9d, 0x87, 0x54, 0x09, 0x89, 0xdd, 0x3d, 0xbf, 0xf3, 0xf0, 0x9c, 0xd7, 0xef, 0x5e,
	0x43, 0x27, 0x17, 0xa3, 0x30, 0xdd, 0xcf, 0xf2, 0x54, 0xa7, 0xac, 0xa7, 0x26, 0xe2, 0xf4, 0xe5,
	0xc9, 0x54, 0xed, 0x13, 0x3a, 0xf8, 0xc3, 0x02, 0xfb, 0x58, 0x0b, 0x2d, 0xd9, 0x2d, 0xe8, 0x9c,
	0x4e, 0xf3, 0x5c, 0x26, 0xda, 0x9f, 0x05, 0x29, 0xb7, 0xfa, 0xd6, 0xd0, 0xf5, 0xa0, 0x80, 0x5e,
	0x04, 0x29, 0xbb, 0x03, 0x4d, 0x54, 0x34, 0xfa, 0xd6, 0xb0, 0x73, 0xff, 0xca, 0xfe, 0x72, 0xa0,
	0xfd, 0x17, 0x41, 0xea, 0xa1, 0x9e, 0xdd, 0x83, 0xf6, 0xe9, 0x44, 0x24, 0x89, 0x8c, 0x78, 0x93,
	0x4c, 0xb7, 0x57, 0x4d, 0x0f, 0x8c, 0xda, 0x2b, 0xed, 0xd8, 0x0e, 0x38, 0xa4, 0xf1, 0xd3, 0x84,
	0xaf, 0xf5, 0xad, 0xa1, 0xe3, 0xb5, 0x49, 0x7e, 0x96, 0xb0, 0x4d, 0x68, 0x66, 0x5a, 0x73, 0x9b,
	0x50, 0x3c, 0xb2, 0xbb, 0xb0, 0x99, 0xa5, 0x51, 0x14, 0x26, 0x63, 0x3f, 0x4c, 0xb4, 0xcc, 0x67,
	0x22, 0xe2, 0xad, 0xbe, 0x35, 0xb4, 0xbd, 0x8d, 0x02, 0x3f, 0x2c, 0xe0, 0xc1, 0x2f, 0x0d, 0x70,
	0x8e, 0xa5, 0xfe, 0xcf, 0xf3, 0xbb, 0x03, 0xbd, 0x59, 0x90, 0xfa, 0x69, 0x26, 0x73, 0xa1, 0xc3,
	0x34, 0x51, 0x7c, 0xad, 0xdf, 0x1c, 0xba, 0xde, 0xfa, 0x2c, 0x48, 0x9f, 0x55, 0xe0, 0x52, 0x19,
	0xec, 0x73, 0xcb, 0xd0, 0x5a, 0x94, 0x61, 0x08, 0x8d, 0x78, 0xc4, 0xdb, 0xf4, 0x05, 0x7c, 0xf5,
	0x0b, 0x9e, 0x4a, 0x2d, 0xbe, 0x14, 0x5a, 0x78, 0x8d, 0x78, 0x74, 0x6e, 0xc1, 0x9c, 0x73, 0x0b,
	0xc6, 0xb6, 0xa1, 0x3d, 0x55, 0x32, 0xf7, 0xc3, 0x11, 0x77, 0xa9, 0x3e, 0x2d, 0x14, 0x0f, 0x47,
	0x83, 0x9f, 0x5d, 0xe8, 0x1e, 0x88, 0x4c, 0x9c, 0x84, 0x51, 0xa8, 0x43, 0xa9, 0x18, 0x83, 0xb5,
	0x59, 0x90, 0x2a, 0x6e, 0x51, 0x22, 0x74, 0x66, 0x5b, 0x60, 0xc7, 0xe9, 0x48, 0x2a, 0xde, 0x20,
	0xd0, 0x08, 0x18, 0xd3, 0x24, 0xaf, 0x78, 0x93, 0xf0, 0x16, 0x65, 0xad, 0xd8, 0x6d, 0x58, 0x1f,
	0x4b, 0xed, 0x07, 0xd3, 0xe4, 0xb4, 0x5e, 0x94, 0xee, 0x58, 0xea, 0xc7, 0x25, 0x86, 0x46, 0x6a,
	0xc9, 0xc8, 0x36, 0x46, 0xaa, 0x6e, 0xf4, 0x10, 0x00, 0x23, 0x45, 0x72, 0x26, 0x23, 0xc5, 0x5b,
	0xfd, 0xe6, 0xb0, 0x73, 0xff, 0xea, 0x99, 0x06, 0x8a, 0x68, 0x2a, 0x3d, 0x77, 0x2c, 0xf5, 0x13,
	0xb2, 0x43, 0x2f, 0xb5, 0xf0, 0x6a, 0x5f, 0xea, 0xa5, 0x2a, 0xaf, 0x4f, 0xa1, 0x87, 0xbf, 0x95,
	0x89, 0x5c, 0xc4, 0x52, 0xcb, 0x5c, 0x71, 0xe7, 0x32, 0x4f, 0x4c, 0xf1, 0xa8, 0xb2, 0x45, 0x6f,
	0xb5, 0xec, 0xed, 0x5e, 0xea, 0xad, 0x96, 0xbc, 0xb7, 0xa1, 0x1d, 0x8b, 0xb9, 0x9f, 0x87, 0x9a,
	0x03, 0x35, 0xb0, 0x15, 0x8b, 0xb9, 0x17, 0xea, 0x52, 0x31, 0x0f, 0x35, 0xef, 0x54, 0x8a, 0xef,
	0x42, 0xcd, 0xfa, 0xd0, 0x45, 0x45, 0x18, 0xf8, 0x6a, 0x12, 0x06, 0x9a, 0x77, 0x49, 0x0b, 0xb1,
	0x98, 0x1f, 0x06, 0xc7, 0x88, 0xb0, 0x03, 0x68, 0x07, 0x61, 0x44, 0x9f, 0xb2, 0x4e, 0x9f, 0x72,
	0xf7, 0xcc, 0x38, 0xd7, 0xfa, 0xbe, 0xff, 0xd8, 0xd8, 0x7e, 0x95, 0xe8, 0xfc, 0xb5, 0x57, 0x7a,
	0xb2, 0x23, 0xe8, 0xea, 0x69, 0x82, 0x13, 0xa6, 0xb4, 0xcc, 0x14, 0xef, 0x51, 0xa4, 0xf7, 0x2f,
	0x8d, 0xf4, 0x9c, 0x1c, 0x8e, 0xd1, 0xde, 0x44, 0xeb, 0xe8, 0x05, 0xc2, 0x38, 0xb4, 0xb3, 0x5c,
	0x8a, 0x38, 0x53, 0x7c, 0xa3, 0xdf, 0x1c, 0xda, 0x5e, 0x29, 0xb2, 0x3e, 0x74, 0x84, 0xd6, 0x32,
	0x99, 0x0a, 0x9d, 0xe6, 0x8a, 0x6f, 0x92, 0xb6, 0x0e, 0xb1, 0xeb, 0xe0, 0xe6, 0xe1, 0xd8, 0xc7,
	0xf1, 0x8b, 0xf8, 0xff, 0x29, 0x63, 0x27, 0x0f, 0xc7, 0x4f, 0x51, 0x66, 0x37, 0x01, 0x48, 0xe1,
	0x27, 0x22, 0x96, 0x9c, 0xd1, 0x94, 0xbb, 0x84, 0x7c, 0x2d, 0x62, 0x89, 0xbf, 0x3b, 0x93, 0xb9,
	0x0a, 0xd3, 0x84, 0x5f, 0x21, 0x5d, 0x29, 0xe2, 0x76, 0xc6, 0xc1, 0xd8, 0xb8, 0x6d, 0x19, 0x55,
	0x1c, 0x8c, 0xc9, 0xe9, 0x1a, 0xb4, 0x94, 0x16, 0x7a, 0xaa, 0xf8, 0x55, 0xb3, 0x35, 0x46, 0xc2,
	0xe1, 0x9d, 0x08, 0xe5, 0x67, 0xe9, 0x2b, 0x99, 0x23, 0xc4, 0xaf, 0xd1, 0xfe, 0x76, 0x27, 0x42,
	0x1d, 0x95, 0x18, 0xf6, 0x0e, 0x8d, 0x44, 0xa2, 0xf9, 0x36, 0xa9, 0x5b, 0x13, 0xa1, 0x3e, 0x4f,
	0x2a, 0x05, 0x76, 0x9b, 0x57, 0x8a, 0xa2, 0xdb, 0xa8, 0xc0, 0x6e, 0xef, 0x54, 0x0a, 0xec, 0xf6,
	0x75, 0x70, 0x51, 0xa1, 0xb2, 0x28, 0xd4, 0x7c, 0x97, 0x54, 0xce, 0x44, 0xa8, 0x63, 0x94, 0xd9,
	0x55, 0x40, 0x33, 0x5f, 0x2b, 0x7e, 0x9d, 0x34, 0xf6, 0x44, 0xa8, 0xe7, 0xaa, 0x0c, 0x86, 0xec,
	0x72, 0xa3, 0x0a, 0x76, 0xa4, 0xf5, 0xee, 0x37, 0xd0, 0xad, 0x37, 0x1b, 0x29, 0xe8, 0xa5, 0x7c,
	0x5d, 0xf0, 0x26, 0x1e, 0xd9, 0x07, 0x60, 0xcf, 0x70, 0x4c, 0x0b, 0xca, 0xdc, 0x59, 0x6d, 0xf7,
	0x61, 0xa2, 0x1f, 0xdc, 0x7f, 0x12, 0x2a, 0xed, 0x19, 0xbb, 0x4f, 0x1a, 0x1f, 0x59, 0xbb, 0xdf,
	0xc3, 0xe6, 0x6a, 0xe7, 0xff, 0xa5, 0xd0, 0x83, 0x77, 0xc0, 0xad, 0x70, 0x24, 0x23, 0x13, 0xa1,
	0x47, 0x03, 0x62, 0x84, 0xc1, 0xdf, 0x4d, 0x68, 0x22, 0xd7, 0xdf, 0x00, 0x37, 0xc8, 0xe5, 0x0f,
	0x53, 0x99, 0x9c, 0xbe, 0xa6, 0xdf, 0xb0, 0xbc, 0x05, 0x80, 0xe4, 0x86, 0x13, 0x41, 0xfc, 0xee,
	0x7a, 0x74, 0xc6, 0xf6, 0x67, 0x27, 0xfe, 0xab, 0x70, 0xa4, 0x27, 0x74, 0x47, 0xe1, 0x44, 0x9e,
	0x7c, 0x8b, 0x22, 0x7e, 0x3e, 0x76, 0xcf, 0x26, 0x14, 0x8f, 0x88, 0x60, 0xdb, 0x5c, 0x83, 0xe4,
	0x21, 0x21, 0xf3, 0x6a, 0x6d, 0xf1, 0xc8, 0xde, 0x03, 0xdb, 0x34, 0xaa, 0x43, 0x29, 0x9e, 0x61,
	0x00, 0xea, 0x9a, 0x67, 0x6c, 0xf0, 0xf2, 0xaa, 0x2d, 0x58, 0xb9, 0xc6, 0x8b, 0x85, 0xa1, 0x84,
	0x2a, 0x8e, 0x5c, 0x27, 0x8e, 0x5c, 0x00, 0xec, 0x11, 0xb4, 0x0a, 0x9a, 0x33, 0x9b, 0x79, 0xeb,
	0x9c, 0xdb, 0x6d, 0xdf, 0x10, 0x9c, 0xd9, 0xc5, 0xc2, 0x9c, 0x1d, 0x00, 0xd4, 0xb8, 0x6a, 0x83,
	0x9c, 0x6f, 0x9f, 0xe7, 0xbc, 0x60, 0x29, 0x13, 0xa0, 0xe6, 0xb6, 0xfb, 0x31, 0x74, 0x6a, 0xb1,
	0xcf, 0xe9, 0xf6, 0x56, 0xbd, 0xdb, 0x8d, 0xfa, 0xb4, 0x7c, 0x06, 0x1b, 0x2b, 0x91, 0xdf, 0xc6,
	0x7d, 0xf0, 0x7b, 0x13, 0x9c, 0xf2, 0x2e, 0x2c, 0xb7, 0x71, 0xd1, 0x77, 0xab, 0xda, 0xc6, 0xc7,
	0x55, 0xeb, 0x77, 0x00, 0x37, 0x86, 0xb8, 0x83, 0xc2, 0x39, 0x1e, 0xae, 0x07, 0x52, 0x07, 0x72,
	0x29, 0x6d, 0x4a, 0x39, 0x05, 0x4d, 0x52, 0x03, 0xae, 0x4b, 0x31, 0x08, 0xb5, 0x55, 0x5e, 0xbb,
	0x68, 0x95, 0xed, 0x8b, 0x56, 0xb9, 0x75, 0xf1, 0x2a, 0xb7, 0x57, 0x56, 0xf9, 0x5d, 0xd8, 0xa0,
	0x55, 0xae, 0x4d, 0x84, 0x43, 0x26, 0x98, 0xe0, 0x62, 0xbb, 0xaa, 0x8c, 0xab, 0xc1, 0x70, 0x17,
	0x19, 0x57, 0xb3, 0x71, 0x13, 0x30, 0x85, 0xf2, 0x1a, 0x04, 0xb2, 0xc0, 0xdf, 0x2e, 0xee, 0xbb,
	0x3b, 0xd0, 0xa3, 0xac, 0x17, 0x53, 0xd0, 0xa9, 0x7e, 0x6a, 0xf9, 0x6a, 0x2a, 0x69, 0xa4, 0x5b,
	0xa7, 0x91, 0xb2, 0x6a, 0xd5, 0xc3, 0x66, 0xbd, 0xaa, 0x9a, 0x57, 0xbc, 0x6d, 0x3e, 0x84, 0x2d,
	0xc3, 0x92, 0x2b, 0x6f, 0x94, 0x1e, 0x59, 0x32, 0x22, 0xcb, 0xe5, 0x77, 0xdd, 0x6d, 0x68, 0x17,
	0x6f, 0x2c, 0xe4, 0xeb, 0xf2, 0x35, 0x66, 0x99, 0xad, 0x2c, 0xc4, 0xc1, 0x31, 0xd8, 0x74, 0x89,
	0xe2, 0x36, 0x13, 0x69, 0x9b, 0x89, 0xa1, 0x33, 0x62, 0x54, 0x36, 0x33, 0x31, 0x74, 0xc6, 0xc1,
	0x8a, 0xc3, 0x84, 0xda, 0xda, 0xf0, 0xf0, 0x48, 0x88, 0x98, 0x53, 0x2f, 0x11, 0x11, 0xf3, 0xc1,
	0x43, 0x70, 0xca, 0xca, 0x61, 0x0c, 0xac, 0x6c, 0x19, 0x17, 0xcf, 0xcb, 0xa3, 0xe8, 0x94, 0xac,
	0x73, 0x0f, 0x6c, 0xaa, 0xe6, 0x5b, 0xb8, 0x3c, 0x02, 0xb7, 0xaa, 0x2e, 0x9a, 0x50, 0xfd, 0x0b,
	0x3f, 0x23, 0x5c, 0xe0, 0xf8, 0x23, 0xd8, 0x66, 0x48, 0x38, 0xb4, 0x65, 0x22, 0x4e, 0x22, 0x39,
	0x2a, 0x06, 0xbd, 0x14, 0x31, 0xad, 0xf2, 0xa1, 0xeb, 0x9a, 0x37, 0xed, 0x12, 0x1d, 0x36, 0x2f,
	0xa2, 0xc3, 0xb5, 0x1a, 0x1d, 0xe2, 0xfd, 0x6c, 0xa6, 0xbe, 0xe0, 0xbd, 0x52, 0xfc, 0x62, 0xf3,
	0xd7, 0x37, 0x7b, 0xd6, 0x6f, 0x6f, 0xf6, 0xac, 0x3f, 0xdf, 0xec, 0x59, 0x3f, 0xfd, 0xb5, 0xf7,
	0xbf, 0x93, 0x16, 0xfd, 0xf5, 0x78, 0xf0, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x9d, 0xc3,
	0x49, 0x89, 0x0c, 0x00, 0x00,
}
